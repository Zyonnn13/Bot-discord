#!/usr/bin/env node

// Script de d√©marrage unifi√© pour Render
// Lance le bot Discord ET le dashboard admin sur le m√™me processus

require('dotenv').config();
const { spawn } = require('child_process');
const logger = require('./logger');

// V√©rifier les variables d'environnement essentielles
const requiredEnvVars = [
    'DISCORD_TOKEN',
    'MONGODB_URI',
    'GUILD_ID',
    'VERIFIED_ROLE_ID',
    'UNVERIFIED_ROLE_ID'
];

console.log('üöÄ D√©marrage du Bot Discord Ynov Enterprise...\n');

// V√©rification des variables d'environnement
let missingVars = [];
for (const varName of requiredEnvVars) {
    if (!process.env[varName]) {
        missingVars.push(varName);
    }
}

if (missingVars.length > 0) {
    console.error('‚ùå Variables d\'environnement manquantes:');
    missingVars.forEach(varName => {
        console.error(`   - ${varName}`);
    });
    process.exit(1);
}

// Configuration du port pour Render
const PORT = process.env.PORT || 3000;
process.env.ADMIN_PORT = PORT;

console.log(`üìä Dashboard admin sera accessible sur le port ${PORT}`);
console.log(`ü§ñ Bot Discord en cours de d√©marrage...\n`);

// D√©marrer le bot principal ET le dashboard dans le m√™me processus
async function startServices() {
    try {
        // Importer et d√©marrer le bot Discord
        console.log('ü§ñ Initialisation du bot Discord...');
        require('./main-mongodb');
        
        // Attendre un peu que le bot se connecte
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Importer et d√©marrer le dashboard admin s√©curis√©
        console.log('üîí Initialisation du dashboard admin...');
        const { app } = require('./admin-dashboard-secure');
        
        // Le dashboard est d√©j√† configur√© pour √©couter sur le port
        // Il va se lancer automatiquement
        
        console.log('\n‚úÖ Services d√©marr√©s avec succ√®s !');
        console.log(`üåê Dashboard accessible sur: https://[VOTRE-URL-RENDER].onrender.com`);
        console.log(`ü§ñ Bot Discord op√©rationnel`);
        
    } catch (error) {
        console.error('‚ùå Erreur lors du d√©marrage:', error.message);
        logger.error('Startup error', { error: error.message });
        process.exit(1);
    }
}

// Gestion des signaux de fermeture
process.on('SIGTERM', () => {
    console.log('üì° Signal SIGTERM re√ßu, arr√™t en cours...');
    process.exit(0);
});

process.on('SIGINT', () => {
    console.log('üì° Signal SIGINT re√ßu, arr√™t en cours...');
    process.exit(0);
});

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
    console.error('‚ùå Erreur non captur√©e:', error.message);
    logger.error('Uncaught exception', { error: error.message, stack: error.stack });
    process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Promise rejet√©e:', reason);
    logger.error('Unhandled rejection', { reason: reason.toString() });
    process.exit(1);
});

// D√©marrer les services
startServices();