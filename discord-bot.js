const { Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const mongoose = require('mongoose');
const { PendingVerification, VerifiedUser, SecurityLog } = require('./models');
require('dotenv').config();

// Configuration du bot Discord
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.DirectMessages
    ]
});

// Variables globales
let verificationChannel = null;
const VERIFICATION_CHANNEL_NAME = 'verification';

// Connexion √† MongoDB
async function connectMongoDB() {
    try {
        await mongoose.connect(process.env.MONGODB_URI);
        console.log('‚úÖ Bot connect√© √† MongoDB');
    } catch (error) {
        console.error('‚ùå Erreur connexion MongoDB:', error.message);
    }
}

// Cr√©ation de l'embed de bienvenue
function createWelcomeEmbed() {
    return new EmbedBuilder()
        .setColor('#667eea')
        .setTitle('üéì Bienvenue sur le serveur Ynov !')
        .setDescription('Pour acc√©der au serveur, vous devez v√©rifier votre identit√© avec votre adresse email Ynov.')
        .addFields([
            {
                name: 'üìß √âtape 1: Email',
                value: 'Cliquez sur le bouton ci-dessous pour commencer la v√©rification',
                inline: false
            },
            {
                name: 'üîê √âtape 2: Code',
                value: 'Vous recevrez un code √† 6 chiffres par email',
                inline: false
            },
            {
                name: '‚úÖ √âtape 3: Validation',
                value: 'Entrez le code pour acc√©der au serveur',
                inline: false
            }
        ])
        .setFooter({ 
            text: 'Syst√®me de v√©rification automatique', 
            iconURL: client.user?.avatarURL() || undefined
        })
        .setTimestamp();
}

// Cr√©ation des boutons
function createVerificationButtons() {
    return new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('start_verification')
                .setLabel('üöÄ Commencer la v√©rification')
                .setStyle(ButtonStyle.Primary),
            new ButtonBuilder()
                .setCustomId('help_verification')
                .setLabel('‚ùì Aide')
                .setStyle(ButtonStyle.Secondary)
        );
}

// √âv√©nement: Bot pr√™t
client.once('ready', async () => {
    console.log(`ü§ñ Bot Discord connect√©: ${client.user.tag}`);
    
    // Connexion MongoDB
    await connectMongoDB();
    
    // Exposer le client pour le dashboard
    global.discordClient = client;
    
    // Trouver ou cr√©er le canal de v√©rification
    const guild = client.guilds.cache.first();
    if (guild) {
        verificationChannel = guild.channels.cache.find(ch => ch.name === VERIFICATION_CHANNEL_NAME);
        
        if (!verificationChannel) {
            try {
                verificationChannel = await guild.channels.create({
                    name: VERIFICATION_CHANNEL_NAME,
                    type: 0, // TextChannel
                    topic: 'üîê Canal de v√©rification automatique - Suivez les instructions pour acc√©der au serveur'
                });
                console.log(`üìù Canal #${VERIFICATION_CHANNEL_NAME} cr√©√©`);
            } catch (error) {
                console.error('‚ùå Erreur cr√©ation canal:', error.message);
            }
        }
        
        // Envoyer le message de v√©rification si le canal existe
        if (verificationChannel) {
            await sendVerificationMessage();
        }
    }
});

// Envoyer le message de v√©rification dans le canal
async function sendVerificationMessage() {
    try {
        // Supprimer les anciens messages du bot
        const messages = await verificationChannel.messages.fetch({ limit: 10 });
        const botMessages = messages.filter(msg => msg.author.id === client.user.id);
        if (botMessages.size > 0) {
            await verificationChannel.bulkDelete(botMessages);
        }
        
        // Envoyer le nouveau message
        await verificationChannel.send({
            embeds: [createWelcomeEmbed()],
            components: [createVerificationButtons()]
        });
        
        console.log('üì® Message de v√©rification envoy√©');
    } catch (error) {
        console.error('‚ùå Erreur envoi message:', error.message);
    }
}

// √âv√©nement: Nouveau membre
client.on('guildMemberAdd', async (member) => {
    console.log(`üëã Nouveau membre: ${member.user.tag}`);
    
    try {
        // Cr√©er ou mettre √† jour l'entr√©e en attente
        await PendingVerification.findOneAndUpdate(
            { userId: member.id },
            {
                userId: member.id,
                username: member.user.username,
                guildId: member.guild.id,
                status: 'waiting_email',
                attempts: 0,
                joinedAt: new Date()
            },
            { upsert: true, new: true }
        );
        
        // Log de s√©curit√©
        await new SecurityLog({
            userId: member.id,
            username: member.user.username,
            action: 'join',
            details: 'Nouveau membre ajout√© en attente de v√©rification',
            success: true
        }).save();
        
        // Envoyer un message priv√© de bienvenue
        try {
            const welcomeDM = new EmbedBuilder()
                .setColor('#667eea')
                .setTitle('üéì Bienvenue sur le serveur Ynov !')
                .setDescription(`Salut ${member.user.username} ! Pour acc√©der au serveur, rendez-vous dans le canal #${VERIFICATION_CHANNEL_NAME} et suivez les instructions.`)
                .addFields([
                    {
                        name: 'üìç Prochaine √©tape',
                        value: `Allez dans #${VERIFICATION_CHANNEL_NAME} et cliquez sur "üöÄ Commencer la v√©rification"`,
                        inline: false
                    }
                ])
                .setTimestamp();
                
            await member.send({ embeds: [welcomeDM] });
        } catch (dmError) {
            console.log(`‚ùå Impossible d'envoyer un MP √† ${member.user.tag}`);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur nouveau membre:', error.message);
    }
});

// √âv√©nement: Interaction avec les boutons
client.on('interactionCreate', async (interaction) => {
    if (!interaction.isButton()) return;
    
    const member = interaction.member;
    const userId = interaction.user.id;
    
    try {
        if (interaction.customId === 'start_verification') {
            // V√©rifier si l'utilisateur est d√©j√† v√©rifi√©
            const verified = await VerifiedUser.findOne({ userId });
            if (verified) {
                return await interaction.reply({
                    content: '‚úÖ Vous √™tes d√©j√† v√©rifi√© !',
                    ephemeral: true
                });
            }
            
            // Demander l'email par MP
            const emailEmbed = new EmbedBuilder()
                .setColor('#667eea')
                .setTitle('üìß V√©rification Email')
                .setDescription('Veuillez envoyer votre adresse email Ynov dans ce message priv√©.')
                .addFields([
                    {
                        name: '‚úÖ Format accept√©',
                        value: 'votre.nom@ynov.com\nvotre.nom@ynov-nantes.com\nvotre.nom@supinfo.com',
                        inline: false
                    },
                    {
                        name: '‚ö†Ô∏è Important',
                        value: 'Utilisez uniquement votre email √©tudiant officiel',
                        inline: false
                    }
                ]);
                
            try {
                await interaction.user.send({ embeds: [emailEmbed] });
                await interaction.reply({
                    content: 'üì® Je vous ai envoy√© un message priv√© ! V√©rifiez vos DM.',
                    ephemeral: true
                });
                
                // Mettre √† jour le statut
                await PendingVerification.findOneAndUpdate(
                    { userId },
                    { status: 'waiting_email' },
                    { upsert: true }
                );
                
            } catch (dmError) {
                await interaction.reply({
                    content: '‚ùå Impossible de vous envoyer un message priv√©. V√©rifiez vos param√®tres de confidentialit√©.',
                    ephemeral: true
                });
            }
            
        } else if (interaction.customId === 'help_verification') {
            const helpEmbed = new EmbedBuilder()
                .setColor('#faa61a')
                .setTitle('‚ùì Aide - V√©rification')
                .setDescription('Voici comment r√©soudre les probl√®mes courants :')
                .addFields([
                    {
                        name: 'üîí Messages priv√©s bloqu√©s',
                        value: 'Param√®tres ‚Üí Confidentialit√© ‚Üí Autoriser les MP des membres du serveur',
                        inline: false
                    },
                    {
                        name: 'üìß Email non accept√©',
                        value: 'Utilisez uniquement votre email √©tudiant officiel (@ynov.com, etc.)',
                        inline: false
                    },
                    {
                        name: 'üïê Code expir√©',
                        value: 'Recommencez la v√©rification, le code expire apr√®s 15 minutes',
                        inline: false
                    },
                    {
                        name: 'üÜò Probl√®me persistant',
                        value: 'Contactez un administrateur du serveur',
                        inline: false
                    }
                ]);
                
            await interaction.reply({
                embeds: [helpEmbed],
                ephemeral: true
            });
        }
        
    } catch (error) {
        console.error('‚ùå Erreur interaction:', error.message);
        await interaction.reply({
            content: '‚ùå Une erreur est survenue. R√©essayez plus tard.',
            ephemeral: true
        });
    }
});

// √âv√©nement: Message re√ßu (pour traiter les emails en MP)
client.on('messageCreate', async (message) => {
    // Ignorer les messages du bot
    if (message.author.bot) return;
    
    // Traiter uniquement les messages priv√©s
    if (message.channel.type !== 1) return; // DM Channel
    
    const userId = message.author.id;
    const content = message.content.trim();
    
    try {
        // V√©rifier si l'utilisateur est en attente d'email
        const pending = await PendingVerification.findOne({ 
            userId, 
            status: 'waiting_email' 
        });
        
        if (!pending) return;
        
        // Validation email
        const emailRegex = /^[^\s@]+@(ynov\.com|ynov-[a-z]+\.com|supinfo\.com)$/i;
        
        if (emailRegex.test(content)) {
            // Email valide
            const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
            const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes
            
            // Mettre √† jour en base
            await PendingVerification.findOneAndUpdate(
                { userId },
                {
                    email: content.toLowerCase(),
                    verificationCode,
                    codeExpiresAt: expiresAt,
                    status: 'waiting_code',
                    lastAttempt: new Date()
                }
            );
            
            // Simuler l'envoi d'email (√† remplacer par un vrai service d'email)
            console.log(`üìß Code de v√©rification pour ${content}: ${verificationCode}`);
            
            const codeEmbed = new EmbedBuilder()
                .setColor('#43b581')
                .setTitle('‚úÖ Email enregistr√© !')
                .setDescription(`Un code de v√©rification a √©t√© envoy√© √† ${content}`)
                .addFields([
                    {
                        name: 'üîê Prochaine √©tape',
                        value: 'Entrez le code √† 6 chiffres que vous avez re√ßu par email',
                        inline: false
                    },
                    {
                        name: '‚è∞ Expiration',
                        value: 'Le code expire dans 15 minutes',
                        inline: false
                    }
                ])
                .setFooter({ text: `Code envoy√© √† ${content}` });
                
            await message.reply({ embeds: [codeEmbed] });
            
            // Log de s√©curit√©
            await new SecurityLog({
                userId,
                username: message.author.username,
                action: 'email_attempt',
                details: `Email accept√©: ${content}`,
                success: true
            }).save();
            
        } else if (content.length === 6 && /^\d+$/.test(content)) {
            // C'est un code de v√©rification
            const pendingCode = await PendingVerification.findOne({ 
                userId, 
                status: 'waiting_code' 
            });
            
            if (!pendingCode) {
                return await message.reply('‚ùå Aucune v√©rification en cours. Recommencez depuis le d√©but.');
            }
            
            if (new Date() > pendingCode.codeExpiresAt) {
                await PendingVerification.findOneAndUpdate(
                    { userId },
                    { status: 'failed' }
                );
                return await message.reply('‚è∞ Code expir√©. Recommencez la v√©rification.');
            }
            
            if (content === pendingCode.verificationCode) {
                // Code correct !
                const guild = client.guilds.cache.first();
                const member = guild?.members.cache.get(userId);
                
                // Cr√©er l'utilisateur v√©rifi√©
                await new VerifiedUser({
                    userId,
                    username: message.author.username,
                    email: pendingCode.email,
                    guildId: pendingCode.guildId,
                    verifiedAt: new Date()
                }).save();
                
                // Supprimer de la liste d'attente
                await PendingVerification.findOneAndDelete({ userId });
                
                // Donner le r√¥le (optionnel)
                if (member) {
                    // Vous pouvez ajouter un r√¥le ici
                    // const role = guild.roles.cache.find(r => r.name === 'V√©rifi√©');
                    // if (role) await member.roles.add(role);
                }
                
                const successEmbed = new EmbedBuilder()
                    .setColor('#43b581')
                    .setTitle('üéâ V√©rification r√©ussie !')
                    .setDescription('F√©licitations ! Vous avez maintenant acc√®s au serveur.')
                    .addFields([
                        {
                            name: '‚úÖ Statut',
                            value: 'Compte v√©rifi√© avec succ√®s',
                            inline: false
                        },
                        {
                            name: 'üéì Bienvenue',
                            value: 'Vous pouvez maintenant participer aux discussions !',
                            inline: false
                        }
                    ]);
                    
                await message.reply({ embeds: [successEmbed] });
                
                // Log de s√©curit√©
                await new SecurityLog({
                    userId,
                    username: message.author.username,
                    action: 'verified',
                    details: `V√©rification r√©ussie avec ${pendingCode.email}`,
                    success: true
                }).save();
                
                console.log(`‚úÖ ${message.author.username} v√©rifi√© avec ${pendingCode.email}`);
                
            } else {
                // Code incorrect
                const attempts = pendingCode.attempts + 1;
                
                if (attempts >= 3) {
                    await PendingVerification.findOneAndUpdate(
                        { userId },
                        { status: 'failed', attempts }
                    );
                    
                    await message.reply('‚ùå Trop de tentatives √©chou√©es. Recommencez la v√©rification depuis le d√©but.');
                } else {
                    await PendingVerification.findOneAndUpdate(
                        { userId },
                        { attempts }
                    );
                    
                    await message.reply(`‚ùå Code incorrect. Il vous reste ${3 - attempts} tentative(s).`);
                }
                
                // Log de s√©curit√©
                await new SecurityLog({
                    userId,
                    username: message.author.username,
                    action: 'code_attempt',
                    details: `Code incorrect (tentative ${attempts}/3)`,
                    success: false
                }).save();
            }
            
        } else {
            // Format non reconnu
            const formatEmbed = new EmbedBuilder()
                .setColor('#f04747')
                .setTitle('‚ùå Format non reconnu')
                .setDescription('Veuillez envoyer:')
                .addFields([
                    {
                        name: 'üìß Pour l\'email',
                        value: 'votre.nom@ynov.com',
                        inline: true
                    },
                    {
                        name: 'üîê Pour le code',
                        value: '123456 (6 chiffres)',
                        inline: true
                    }
                ]);
                
            await message.reply({ embeds: [formatEmbed] });
        }
        
    } catch (error) {
        console.error('‚ùå Erreur traitement message:', error.message);
        await message.reply('‚ùå Une erreur est survenue. R√©essayez plus tard.');
    }
});

// Gestion des erreurs
client.on('error', console.error);

process.on('unhandledRejection', error => {
    console.error('‚ùå Unhandled promise rejection:', error);
});

// Connexion du bot
client.login(process.env.DISCORD_BOT_TOKEN);